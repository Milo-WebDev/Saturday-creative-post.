/* --- START OF FILE css/music-page.css (REVISED & FAITHFUL TO ORIGINAL m-style.css specifics) --- */

/* Inherits from global.css (fonts, variables, basic reset, header, footer) */

/* ------------------------------------------------------------------ */
/* --- Styles specific to music.html from original m-style.css ---- */
/* ------------------------------------------------------------------ */

/* Page container specific setup for music page */
.page-container {
    /* global.css already handles basic .page-container structure.
       If music.html needs specific overrides for .page-container itself, add them here.
       The ::before pseudo-element is what handles the background grid. */
}

/* Background Grid using ::before on page-container (OUTER) */
/* This was a key part of your original m-style.css for music.html */
.page-container::before {
  content: '';
  position: absolute;
  top: -22%; /* Original value */
  left: 10%; /* Original value */
  width: 80%; /* Original value */
  height: 100%; /* Original value */
  transform: translateY(var(--parallax-offset-y)); /* Applied via global.css var, ensure it's set */
  background-image: url('../svg/long%20grid2.svg'); /* Ensure path is correct */
  background-repeat: no-repeat;
  background-position: center center;
  background-size: contain;
  z-index: -1; /* Original value */
  pointer-events: none;
  min-height: 100px; /* Original value */
}

/* Inner Wrapper for content clipping - from original m-style.css */
.page-content-wrapper {
  width: 100%;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  position: relative; /* Stacking context */
  z-index: 1; /* Ensure content is above page-container::before */
  overflow: hidden; /* FORCE CLIPPING HERE (X and Y) - Original intent */
}


/* --------------------- */
/* --- Intro Section --- */
/* (Faithful to original m-style.css) */
/* --------------------- */
.intro-section {
  width: 100%;
  min-height: 50vh; /* Original value */
  padding: 100px 40px 60px 40px; /* Original value */
  display: flex;
  align-items: flex-end;
  box-sizing: border-box;
}

.intro-content {
  width: 100%;
  max-width: 1200px; /* Original value */
  margin: 0 auto; /* Original value */
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  gap: 40px; /* Original value */
}

.intro-title {
  font-family: 'Pragati Narrow', sans-serif; /* Already in global, but good for specificity */
  font-weight: 700; /* Already in global */
  font-size: clamp(2.5rem, 6vw, 4.5rem); /* Original value */
  line-height: 1.1; /* Original value */
  color: var(--color-heading); /* From global variables */
  text-transform: uppercase; /* Original value */
  margin: 0; /* Original value */
  flex-basis: 60%; /* Original value */
  text-align: left; /* Original value */
}

.intro-title .highlight {
  position: relative; /* Original value */
}

.intro-title .highlight::before {
  content: url('../svg/Mark.svg'); /* Ensure path is correct */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -22%); /* Original value */
  z-index: -1;
  width: 115%;
  height: 140%;
  display: block;
  opacity: 1;
  pointer-events: none;
}

.intro-details {
  flex-basis: 35%; /* Original value */
  text-align: right; /* Original value */
}

.intro-details p {
  font-family: 'FreightTextPro', serif; /* Already in global */
  font-weight: 400; /* Already in global */
  font-size: 1rem; /* Original value */
  line-height: 1.6; /* Original value */
  color: var(--color-text-main); /* From global variables */
  margin: 0 0 0.5rem 0; /* Original value */
}

.intro-details p.post-date {
  font-size: 0.85rem; /* Original value */
  color: var(--color-text-muted); /* From global variables */
  font-weight: 300; /* Original value */
  margin-bottom: 0; /* Original value */
}

/* Responsive adjustments for Intro Section - from original m-style.css */
@media screen and (max-width: 768px) {
  .intro-section {
    padding: 80px 20px 40px 20px; /* Original value */
    min-height: 40vh; /* Original value */
    align-items: center; /* Original value */
  }
  .intro-content {
    flex-direction: column; /* Original value */
    align-items: flex-start; /* Original value */
    gap: 20px; /* Original value */
  }
  .intro-title { flex-basis: auto; text-align: left; } /* Original value */
  .intro-details { flex-basis: auto; text-align: left; width: 100%; } /* Original value */
}


/* --------------------- */
/* --- Animated Grid --- */
/* (Faithful to original m-style.css) */
/* --------------------- */
.grid {
  width: 100%;
  padding: 0 12px; /* Original value */
  grid-template-columns: 100%; /* Original value */
  grid-auto-rows: auto; /* Original value */
  display: grid;
  grid-gap: 4rem; /* Original value */
  position: relative;
  margin: 10vh auto 20vh; /* Original value */
  /* --img-ratio and --s are applied via inline styles in HTML for items */
  /* The :root definition of --img-ratio: 1.5 in my previous example was a fallback,
     your HTML inline styles like style="--r: 1;--c: 1;--s:4;" will take precedence for item sizing.
     If you had specific ratios defined for items that did NOT have --s, then a general
     .grid__item { --img-ratio: default_value_if_not_set_by_s_or_individually; } could be useful.
     However, your original m-style.css had :root { --img-ratio: 1.5; --s: 1; }
     And the .grid__item-img used aspect-ratio: var(--img-ratio);
     Let's make sure to use the original values for general items if they don't have --s.
     Actually, your original --s:1 was a default for scale.
     The aspect-ratio: var(--img-ratio) on grid__item-img is key.
  */
}
/* This was in your original :root, let's keep it accessible as a default for any grid item img
   if it doesn't get overridden by a more specific --s or --img-ratio at item level */
:root {
  --img-ratio: 1.5; /* As per original m-style.css */
}


.grid__item {
  position: relative; /* Original value */
  margin: 0; /* Original value */
  /* The inline styles like --r, --c, --s define grid placement and span */
  --s: 1;
}

.grid__item-img {
  position: relative; /* Original value */
  overflow: hidden; /* Original value */
  display: grid; /* Original value */
  place-items: center; /* Original value */
  width: 100%; /* Original value */
  height: auto; /* Original value */
  aspect-ratio: var(--img-ratio); /* Original value - uses the general :root or item-specific one */
}

.grid__item-img-inner {
  width: 100%; /* Original value */
  height: 100%; /* Original value */
  background-position: 50%; /* Original value */
  background-size: cover; /* Original value */
  position: relative; /* Original value */
}

.grid__item-caption {
  position: absolute; /* Original value */
  padding: 0.75rem; /* Original value */
  display: flex; /* Original value */
  flex-wrap: wrap; /* Original value */
  gap: 0.25rem 0.5rem; /* Original value */
  font-size: 1rem; /* Original value */
  /* background: rgba(247, 245, 240, 0.8); /* REMOVED in original */
  /* border-radius: 3px; /* REMOVED in original */
}

.grid__item-caption h3 {
  font-weight: bold; /* Original value */
  font-size: inherit; /* Original value */
  margin: 0; /* Original value */
  color: var(--color-title); /* From global variables */
  display: inline; /* Original value */
  margin-right: 0.5rem; /* Original value */
}

.grid__item-caption span { /* This is for the year */
  font-weight: bold; /* Original value */
  color: var(--color-year); /* From global variables */
  display: inline; /* Original value */
  margin-right: 0.5rem; /* Original value */
}

.grid__item-caption p {
  margin-top: 0.5rem; /* Original value */
  width: 100%; /* Original value */
  font-size: 0.9em; /* Original value */
  color: #555; /* Original value - slightly different from --color-text-main */
  line-height: 1.4; /* Original value */
  font-weight: 400; /* Original value */
}

.grid__item-caption p strong {
  color: var(--color-primary); /* From global variables */
}

.grid__item-caption p em {
  font-style: italic; /* Original value */
}

/* Responsive adjustments for Grid - from original m-style.css */
@media screen and (min-width: 53em) {
  .grid {
    grid-template-columns: repeat(8,1fr); /* Original value */
    padding: 0 40px; /* Original value */
    grid-gap: 2rem; /* Original value */
  }
  .grid__item {
      grid-column: var(--c) / span var(--s); /* Original value */
      grid-row: var(--r); /* Original value */
  }
  .grid__item-caption {
      position: absolute; /* Original value */
      /* background: none; /* Kept if desired in original */
      padding: 0.5rem 0; /* Original value */
      bottom: auto; /* Original value */
      top: 100%; /* Original value */
      left: 0; /* Original value */
      width: auto; /* Original value - Allow content to determine width */
  }
}

/* --- End of File --- */